{"name": "practic1.ipynb", "path": "Convertion/practic1.ipynb", "last_modified": "2019-03-17T13:57:56.671429Z", "created": "2019-03-25T08:26:25.977814Z", "content": {"cells": [{"cell_type": "code", "execution_count": 50, "metadata": {"trusted": true}, "outputs": [{"name": "stdout", "output_type": "stream", "text": "(Regs/Views*100) = \n\t[0.39984768 0.60367454 0.95642933 0.69025022 0.6185567  2.00668896\n 1.67364017 1.02564103 1.10497238 1.11111111]\n\nsumm  Views = \n\t16551\n\nsumm Regs = \n\t103\n\n(summ Regs/summ Views*100) = \n\t0.6223188931182405\n\ncorCoeff = \n\t0.9694433977097228\n\n\u0421onversion = \n\t0.51 %\n\n"}, {"data": {"image/png": "\n", "text/plain": "<Figure size 432x288 with 1 Axes>"}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": "import matplotlib.pyplot as plt\nimport numpy as np\n\ndef performSum(li):\n    sum = 0\n    for el in li:\n        sum+=el\n    return sum;\n\ndef mySqrt(num):\n    return num**(1/2)\n\ndef myM(x, n):\n    return performSum(x)/n\n\ndef myD(x, mx, n):\n    return performSum((x-mx)**2)/n\n\ndef my\u0421onversionCoef(x, z, mx, mz, dx, dz, n):\n    return performSum((x-mx)*(z-mz))/(n*mySqrt(dx*dz))\n\ndef my\u0421onversion(x, z, mx, mz, n):\n    return (mx*mz-performSum(x*z)/n)/(mx**2-performSum(x**2)/n)\n\ndef myB(a, mx, mz):\n    return mz-a*mx\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0434\u0432\u0443\u0445 \n# \u0432\u044b\u0431\u043e\u0440\u043e\u043a Views \u0438 Regs\ndef preparation(x, z, n):\n    plt.scatter(x, z, color='red')\n\n    mx = myM(x, n)\n    dx = myD(x, mx, n)\n    \n    mz = myM(z, n)\n    dz = myD(z, mz, n)\n    \n    corCoeff = my\u0421onversionCoef(x, z, mx, mz, dx, dz, n)\n\n    print(\"corCoeff = \\n\\t\" + str(corCoeff) + \"\\n\")\n    \n# \u041c\u0435\u0442\u043e\u0434 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432\ndef leastSquareMethod(x, z, n):\n    mx = myM(x, n)    \n    mz = myM(z, n)\n\n    a = my\u0421onversion(x, z, mx, mz, n)\n    b = myB(a, mx, mz)\n\n    print(\"\u0421onversion = \\n\\t\" + str(a*100-a*100%0.01) + \" %\\n\")\n\n    plt.plot(x, a*x+b, 'b')\n    \n\n# \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0431\u043b\u043e\u043a\n\n# \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0442\u0440\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0430)\n\nt = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nviews = np.array([5252, 7620, 941, 1159, 485, 299, 239, 195, 181, 180])\nregs = np.array([21, 46, 9, 8, 3, 6, 4, 2, 2, 2])\n\n# \u0420\u0430\u0441\u0447\u0435\u0442\u044b \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u0438 (\u0432 %)\n\nconversion = regs/views*100\nviewsSum = performSum(views)\nregsSum = performSum(regs)\navgConver = regsSum/viewsSum*100\n\nprint(\"(Regs/Views*100) = \\n\\t\" + str(conversion) + \"\\n\")\nprint(\"summ  Views = \\n\\t\" + str(viewsSum) + \"\\n\")\nprint(\"summ Regs = \\n\\t\" + str(regsSum) + \"\\n\")\nprint(\"(summ Regs/summ Views*100) = \\n\\t\" + str(avgConver) + \"\\n\")\n\nx = views\nz = regs\nn = 10\n\npreparation(x, z, n)\n\nleastSquareMethod(x, z, n)\n\n#print(\"B = \\n\\t\" + str(b) + \"\\n\")"}, {"cell_type": "code", "execution_count": 58, "metadata": {"trusted": true}, "outputs": [{"name": "stdout", "output_type": "stream", "text": "corCoeff = \n\t0.8938961631060347\n\n\u0421onversion = \n\t86.31 %\n\n"}, {"data": {"image/png": "\n", "text/plain": "<Figure size 432x288 with 1 Axes>"}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": "import random\n\n# \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041c\u043e\u043d\u0442\u0435-\u041a\u0430\u0440\u043b\u043e\n\n# \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nn = 20\nr = 0.9\nx = np.array([random.random() for i in range(n)])\ny = np.array([random.random() for i in range(n)])\nz = np.array([x[i]*r+random.random()*mySqrt(1-r**2) for i in range(n)]) \n\npreparation(x, z, n)\n\nleastSquareMethod(x, z, n)\n"}, {"cell_type": "code", "execution_count": null, "metadata": {"trusted": true}, "outputs": [], "source": ""}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.6.6"}}, "nbformat": 4, "nbformat_minor": 2}, "format": "json", "mimetype": null, "size": 24717, "writable": true, "type": "notebook"}